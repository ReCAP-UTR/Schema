syntax = "proto3";

package arg_services.nlp.v1;
option java_package = "de.uni_trier.recap.arg_services.nlp.v1";

service NlpService {
    rpc DocBin (DocBinRequest) returns (DocBinResponse);
    rpc Vectors (VectorsRequest) returns (VectorsResponse);
    rpc Similarities (SimilaritiesRequest) returns (SimilaritiesResponse);
    // rpc ResetCache (ResetCacheRequest) returns (ResetCacheResponse);
}

// message ResetCacheRequest {
//     repeated CacheType cache_types = 1;
// }
// message ResetCacheResponse {}

// enum CacheType {
//     CACHE_TYPE_UNSPECIFIED = 0;
//     CACHE_TYPE_SPACY = 1;
//     CACHE_TYPE_EMBEDDINGS = 2;
//     CACHE_TYPE_VECTORS = 3;
//     CACHE_TYPE_SIMILARITIES = 4;
// }

message NlpConfig {
   string language = 1;
   string spacy_model = 2;
   repeated EmbeddingModel embedding_models = 3;
   SimilarityMethod similarity_method = 4;
}

message SimilaritiesRequest {
    NlpConfig config = 1;
    repeated TextTuple text_tuples = 2;
}

message SimilaritiesResponse {
    repeated double similarities = 1;
}

enum SimilarityMethod {
    SIMILARITY_METHOD_UNSPECIFIED = 0;
    SIMILARITY_METHOD_COSINE = 1;
    SIMILARITY_METHOD_DYNAMAX_JACCARD = 2;
    SIMILARITY_METHOD_MAXPOOL_JACCARD = 3;
    SIMILARITY_METHOD_DYNAMAX_DICE = 4;
    SIMILARITY_METHOD_DYNAMAX_OTSUKA = 5;
    SIMILARITY_METHOD_WMD = 6;
    SIMILARITY_METHOD_EDIT = 7;
    SIMILARITY_METHOD_JACCARD = 8;
    SIMILARITY_METHOD_ANGULAR = 9;
}

message TextTuple {
    string text1 = 1;
    string text2 = 2;
}

message DocBinRequest {
    NlpConfig config = 1;
    repeated string texts = 2;
    repeated string attributes = 3;
    bool no_attributes = 4;
    repeated string pipes = 5;
    bool no_pipes = 6;
    repeated EmbeddingLevel embedding_levels = 7;
}

message DocBinResponse {
    bytes docbin = 1;
}

message VectorsRequest {
    NlpConfig config = 1;
    repeated string texts = 2;
    repeated EmbeddingLevel embedding_levels = 3;
}

message VectorsResponse {
    repeated VectorResponse vectors = 1;
}

message VectorResponse {
    Vector document = 1;
    repeated Vector tokens = 2;
    repeated Vector sentences = 3;
}

message Vector {
    repeated double vector = 1;
}

enum EmbeddingLevel {
    EMBEDDING_LEVEL_UNSPECIFIED = 0;
    EMBEDDING_LEVEL_DOCUMENT = 1;
    EMBEDDING_LEVEL_TOKENS = 2;
    EMBEDDING_LEVEL_SENTENCES = 3;
}

message EmbeddingModel {
    EmbeddingType model_type = 1;
    string model_name = 2;
    Pooling pooling = 3;
}

enum Pooling {
    POOLING_UNSPECIFIED = 0;
    POOLING_MEAN = 1;
    POOLING_MAX = 2;
    POOLING_MIN = 3;
    POOLING_SUM = 4;
    POOLING_FIRST = 5;
    POOLING_LAST = 6;
    POOLING_MEDIAN = 7;
    POOLING_GMEAN = 8;
    POOLING_HMEAN = 9;
}

enum EmbeddingType {
    EMBEDDING_TYPE_UNSPECIFIED = 0;
    EMBEDDING_TYPE_SPACY = 1;
    EMBEDDING_TYPE_USE = 2;
    EMBEDDING_TYPE_SBERT = 3;
}
